/* 
  get random number in range between min and max value
*/

@function random-number($min, $max) {
  $rand: random();
  $random-num: $min + floor($rand * (($max - $min) + 1));

  @return $random-num;
}


/* 
  add letters-animation (change fill property) to every letter in logo element 
*/

@mixin letters-animation ($letters-colors, $length-letter) {
  $len: length($letters-colors);

  @for $i from 1 through $length-letter {

    &:nth-child(#{$i}) {
      animation: letter-animation#{$i} 4s cubic-bezier(.05, .35, 1, .77) infinite;
    }

    @keyframes letter-animation#{$i} {

      0% {
        fill: nth($letters-colors, random-number(1, $len));
      }

      25% {
        fill: nth($letters-colors, random-number(1, $len));
      }

      100% {
        fill: nth($letters-colors, random-number(1, $len));
      }
    }
  }
}


// =============================================================================
// String Replace
// =============================================================================

@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);

  @if $index {

    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}

// =============================================================================
// Font Face
// =============================================================================

@mixin font-face($name, $path, $weight: null, $style: null, $exts: woff2 woff ttf) {
  $src: null;

  $extmods: (
    eot: '?',
    svg: '#' + str-replace($name, ' ', '_')
  );

  $formats: (
    otf: 'opentype',
    ttf: 'truetype'
  );

  @each $ext in $exts {
    $extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
    $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
    $src: append($src, url(quote($path + '.' + $extmod)) format(quote($format)), comma);
  }

  @font-face {
    font-family: quote($name);
    font-style: $style;
    font-weight: $weight;
    src: $src;
    font-display: swap;
  }
}

@mixin row-color($color) {
  background-color: $color;
  //background-color: rgba($color, .7);
  box-shadow: -.2em 0 0 $color, .2em 0 0 $color;
}

// edit font rendering -> tip: use for light text on dark backgrounds

@mixin fontSmooth {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

//map breakpoints variables

$breakpoints: (
  xs: 480px,
  s: 767px,
  m: 991px,
  l: 1130px,
  xl: 1199px, 
  xxl: 1450px 
);

// @include respond-below(sm) {}

@mixin respond-below($breakpoint) {

  // If the breakpoint exists in the map.

  @if map-has-key($breakpoints, $breakpoint) {

    // Get the breakpoint value.
    $breakpoint-value: map-get($breakpoints, $breakpoint);

    // Write the media query.

    @media (max-width: ($breakpoint-value - 1)) {

      @content;
    }
  
    // If the breakpoint doesn't exist in the map.
  }

  @else {

    // Log a warning.

    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}

@mixin linear-gradient-add($color, $size:55%) {
  background: linear-gradient($color 0%, $color $size, $white $size, $white 100%);
}



